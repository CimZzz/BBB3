// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.11'
    repositories {
        jcenter()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven {
            url "http://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/"
        }
        maven {
            // All of React Native (JS, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        google()
        maven { url 'https://maven.google.com' }
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven {
            url "http://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/"
        }
        maven {
            // All of React Native (JS, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        google()
        maven { url 'https://maven.google.com' }
    }
}


subprojects {
    boolean isLibrary = project.getName() == "Library"
    if(isLibrary) {
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-kapt'
    }
    else apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply from: '../config.gradle'

    android {
        compileSdkVersion 27

        defaultConfig {
            minSdkVersion 15
            targetSdkVersion 27
            versionCode project.ext.version
            versionName project.ext.versionName
            multiDexEnabled true
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

            ndk {
                abiFilters "armeabi-v7a", "x86", "armeabi"
            }

            packagingOptions {
                exclude "lib/arm64-v8a/libgnustl_shared.so"
                exclude "lib/arm64-v8a/libimagepipeline.so"
            }
        }

        signingConfigs {
            debug {
                storeFile file('../quanmaomao.jks')
                storePassword 'wang199401'
                keyAlias 'quantamaomao'
                keyPassword 'wang199401'
            }

            release {
                storeFile file('../quanmaomao.jks')
                storePassword 'wang199401'
                keyAlias 'quantamaomao'
                keyPassword 'wang199401'
            }
        }

        buildTypes {
            debug {
                signingConfig signingConfigs.release
            }

            release {
                signingConfig signingConfigs.release
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        if(isLibrary) {
            sourceSets {
                main {
                    jniLibs.srcDirs = ['jniLibs']
                    jni.srcDirs = []
                }
            }
        }
    }


    repositories {
        flatDir {
            dirs '../library/libs'
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        project.ext.allDependenciesMap.each {
            switch (it[0]) {
                case 1:
                    compile it[1]
                    break
                case 2:
                    implementation it[1]
                    break
                case 3:
                    api it[1]
                    break
                case 4:
                    kapt it[1]
                    break
            }
        }

        if(isLibrary) {
            project.ext.libraryDependenciesMap.each {
                switch (it[0]) {
                    case 1:
                        compile it[1]
                        break
                    case 2:
                        implementation it[1]
                        break
                    case 3:
                        api it[1]
                        break
                    case 4:
                        kapt it[1]
                        break
                }
            }
        }
        else {
            implementation project(':Library')
        }
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}
